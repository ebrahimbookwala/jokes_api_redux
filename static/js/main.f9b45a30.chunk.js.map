{"version":3,"sources":["features/jokes/jokesSlice.js","features/jokes/SingleJoke.js","features/jokes/MoreButton.js","features/jokes/LessButton.js","features/jokes/JokesList.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchJokes","createAsyncThunk","number","a","fetch","data","json","jokesData","value","deleteAndAddJoke","id","dispatch","deleteJoke","jokesSlice","createSlice","name","initialState","status","jokes","error","reducers","state","action","jokeIndex","findIndex","joke","payload","splice","lessJokes","length","extraReducers","pending","fulfilled","rejected","type","actions","SingleJoke","useDispatch","useState","isHovered","setIsHovered","handleMouseMove","prev","imageSource","className","onMouseEnter","onMouseLeave","onClick","src","alt","MoreButton","LessButton","JokesList","useSelector","useEffect","console","log","jokeList","map","App","store","configureStore","reducer","jokesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9b45a30.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { status: \"idle\", jokes: [], error: \"\" };\r\n\r\nexport const fetchJokes = createAsyncThunk(\r\n\t\"jokesData/fetchJokes\",\r\n\tasync (number) => {\r\n\t\tconst data = await fetch(`http://api.icndb.com/jokes/random/${number}`);\r\n\t\tconst jokesData = await data.json();\r\n\t\treturn jokesData.value;\r\n\t}\r\n);\r\n\r\nexport const deleteAndAddJoke = createAsyncThunk(\r\n\t\"jokesData/deleteAndAddJoke\",\r\n\tasync (id, { dispatch }) => {\r\n\t\tconst data = await fetch(`http://api.icndb.com/jokes/random/1`);\r\n\t\tconst jokesData = await data.json();\r\n\t\tdispatch(deleteJoke({ jokesData, id }));\r\n\t}\r\n);\r\n\r\nconst jokesSlice = createSlice({\r\n\tname: \"jokesData\",\r\n\tinitialState,\r\n\treducers: {\r\n\t\tdeleteJoke(state, action) {\r\n\t\t\tconst jokeIndex = state.jokes.findIndex(\r\n\t\t\t\t(joke) => joke.id === action.payload.id\r\n\t\t\t);\r\n\r\n\t\t\tstate.jokes.splice(jokeIndex, 1, action.payload.jokesData.value[0]);\r\n\t\t},\r\n\t\tlessJokes(state, action) {\r\n\t\t\tstate.jokes = state.jokes.splice(0, state.jokes.length - 5);\r\n\t\t},\r\n\t},\r\n\textraReducers: {\r\n\t\t[fetchJokes.pending]: (state) => {\r\n\t\t\tstate.status = \"loading\";\r\n\t\t},\r\n\t\t[fetchJokes.fulfilled]: (state, action) => {\r\n\t\t\tstate.status = \"succeeded\";\r\n\t\t\tstate.jokes = [...state.jokes, ...action.payload];\r\n\t\t},\r\n\t\t[fetchJokes.rejected]: (state, action) => {\r\n\t\t\tstate.status = \"failed\";\r\n\t\t\tstate.error = action.payload.type;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport default jokesSlice.reducer;\r\nexport const { deleteJoke, lessJokes } = jokesSlice.actions;\r\n","import React, { useState } from \"react\";\r\nimport { deleteAndAddJoke } from \"./jokesSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction SingleJoke({ joke }) {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst [isHovered, setIsHovered] = useState(false);\r\n\r\n\tconst handleMouseMove = () => {\r\n\t\tsetIsHovered((prev) => !prev);\r\n\t};\r\n\r\n\tconst imageSource = isHovered\r\n\t\t? \"/images/delete.jpg\"\r\n\t\t: \"/images/delete-plain.png\";\r\n\r\n\treturn (\r\n\t\t<li className=\"joke-list-item\">\r\n\t\t\t<div className=\"joke-text\">{joke.joke}</div>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"delete-button\"\r\n\t\t\t\tonMouseEnter={handleMouseMove}\r\n\t\t\t\tonMouseLeave={handleMouseMove}\r\n\t\t\t\tonClick={() => dispatch(deleteAndAddJoke(joke.id))}\r\n\t\t\t>\r\n\t\t\t\t<img src={imageSource} alt=\"\" />\r\n\t\t\t</button>\r\n\t\t</li>\r\n\t);\r\n}\r\n\r\nexport default SingleJoke;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchJokes } from \"./jokesSlice\";\r\n\r\nfunction MoreButton() {\r\n\tconst dispatch = useDispatch();\r\n\treturn (\r\n\t\t<button\r\n\t\t\ttype=\"button\"\r\n\t\t\tonClick={() => {\r\n\t\t\t\tdispatch(fetchJokes(5));\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\tMore{\" \"}\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default MoreButton;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { lessJokes } from \"./jokesSlice\";\r\n\r\nfunction LessButton() {\r\n\tconst dispatch = useDispatch();\r\n\treturn (\r\n\t\t<button\r\n\t\t\ttype=\"button\"\r\n\t\t\tonClick={() => {\r\n\t\t\t\tdispatch(lessJokes());\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\tLess\r\n\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default LessButton;\r\n","import React, { useEffect } from \"react\";\r\nimport SingleJoke from \"./SingleJoke\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchJokes } from \"./jokesSlice\";\r\nimport MoreButton from \"./MoreButton\";\r\nimport LessButton from \"./LessButton\";\r\n\r\nfunction JokesList() {\r\n\tconst dispatch = useDispatch();\r\n\tconst { status, jokes } = useSelector((state) => state.jokesData);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (jokes.length === 0) {\r\n\t\t\tdispatch(fetchJokes(10));\r\n\t\t}\r\n\t}, [jokes.length, dispatch]);\r\n\r\n\tconsole.log(status);\r\n\tif (status === \"loading\") {\r\n\t\treturn <div>Loading....</div>;\r\n\t}\r\n\r\n\tconst jokeList = jokes.map((joke) => (\r\n\t\t<SingleJoke key={joke.id} joke={joke} />\r\n\t));\r\n\r\n\treturn (\r\n\t\t<section className=\"joke-list\">\r\n\t\t\t<ul>{jokeList}</ul>\r\n\t\t\t<MoreButton />\r\n\t\t\t<LessButton />\r\n\t\t</section>\r\n\t);\r\n}\r\n\r\nexport default JokesList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport JokesList from \"./features/jokes/JokesList\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header>\n\t\t\t\t<h1>Jokes</h1>\n\t\t\t\t<JokesList />\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport jokesReducer from \"../features/jokes/jokesSlice\";\n\nexport const store = configureStore({\n\treducer: {\n\t\tjokesData: jokesReducer,\n\t},\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}